// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { APIResource } from '../core/resource';
import { APIPromise } from '../core/api-promise';
import { RequestOptions } from '../internal/request-options';

export class Embeddings extends APIResource {
  /**
   * Creates an embedding vector representing the input text.
   *
   * @example
   * ```ts
   * const embedding = await client.embeddings.create({
   *   input: 'The quick brown fox jumped over the lazy dog',
   *   model: 'text-embedding-3-small',
   * });
   * ```
   */
  create(body: EmbeddingCreateParams, options?: RequestOptions): APIPromise<EmbeddingCreateResponse> {
    return this._client.post('/embeddings', { body, ...options });
  }
}

export interface EmbeddingCreateResponse {
  /**
   * The list of embeddings generated by the model.
   */
  data: Array<EmbeddingCreateResponse.Data>;

  /**
   * The name of the model used to generate the embedding.
   */
  model: string;

  /**
   * The object type, which is always "list".
   */
  object: 'list';

  /**
   * The usage information for the request.
   */
  usage: EmbeddingCreateResponse.Usage;
}

export namespace EmbeddingCreateResponse {
  /**
   * Represents an embedding vector returned by embedding endpoint.
   */
  export interface Data {
    /**
     * The embedding vector, which is a list of floats.
     */
    embedding: Array<number>;

    /**
     * The index of the embedding in the list of embeddings.
     */
    index: number;

    /**
     * The object type, which is always "embedding".
     */
    object: 'embedding';
  }

  /**
   * The usage information for the request.
   */
  export interface Usage {
    /**
     * The number of tokens used by the prompt.
     */
    prompt_tokens: number;

    /**
     * The total number of tokens used by the request.
     */
    total_tokens: number;
  }
}

export interface EmbeddingCreateParams {
  /**
   * Input text to embed, encoded as a string or array of tokens. To embed multiple
   * inputs in a single request, pass an array of strings.
   */
  input: string | Array<string>;

  /**
   * ID of the model to use. You can use the List models API to see all of your
   * available models.
   */
  model: string;

  /**
   * A unique identifier representing your end-user, which can help DigitalOcean to
   * monitor and detect abuse.
   */
  user?: string;
}

export declare namespace Embeddings {
  export {
    type EmbeddingCreateResponse as EmbeddingCreateResponse,
    type EmbeddingCreateParams as EmbeddingCreateParams,
  };
}
