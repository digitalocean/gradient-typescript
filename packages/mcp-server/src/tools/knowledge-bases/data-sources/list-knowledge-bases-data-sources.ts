// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { maybeFilter } from 'gradientai-mcp/filtering';
import { asTextContentResult } from 'gradientai-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import type { Metadata } from '../../';
import GradientAI from 'gradientai';

export const metadata: Metadata = {
  resource: 'knowledge_bases.data_sources',
  operation: 'read',
  tags: [],
  httpMethod: 'get',
  httpPath: '/v2/gen-ai/knowledge_bases/{knowledge_base_uuid}/data_sources',
  operationId: 'list_knowledge_base_data_sources',
};

export const tool: Tool = {
  name: 'list_knowledge_bases_data_sources',
  description:
    "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nTo list all data sources for a knowledge base, send a GET request to `/v2/gen-ai/knowledge_bases/{knowledge_base_uuid}/data_sources`.\n\n# Response Schema\n```json\n{\n  type: 'object',\n  title: 'a list of knowledge base data sources',\n  properties: {\n    knowledge_base_data_sources: {\n      type: 'array',\n      title: 'the data sources',\n      items: {\n        $ref: '#/$defs/api_knowledge_base_data_source'\n      }\n    },\n    links: {\n      $ref: '#/$defs/api_links'\n    },\n    meta: {\n      $ref: '#/$defs/api_meta'\n    }\n  },\n  required: [],\n  $defs: {\n    api_knowledge_base_data_source: {\n      type: 'object',\n      title: 'Data Source configuration for Knowledge Bases',\n      properties: {\n        aws_data_source: {\n          type: 'object',\n          title: 'AWS S3 Data Source for Display',\n          properties: {\n            bucket_name: {\n              type: 'string',\n              title: 'Spaces bucket name'\n            },\n            item_path: {\n              type: 'string'\n            },\n            region: {\n              type: 'string',\n              title: 'Region of bucket'\n            }\n          },\n          required: []\n        },\n        bucket_name: {\n          type: 'string',\n          title: 'name of storage bucket - Deprecated, moved to data_source_details'\n        },\n        created_at: {\n          type: 'string',\n          title: 'creation date / time',\n          format: 'date-time'\n        },\n        file_upload_data_source: {\n          $ref: '#/$defs/api_file_upload_data_source'\n        },\n        item_path: {\n          type: 'string',\n          title: 'path of folder or object in bucket - Deprecated, moved to data_source_details'\n        },\n        last_datasource_indexing_job: {\n          $ref: '#/$defs/api_indexed_data_source'\n        },\n        last_indexing_job: {\n          $ref: '#/$defs/api_indexing_job'\n        },\n        region: {\n          type: 'string',\n          title: 'region code - Deprecated, moved to data_source_details'\n        },\n        spaces_data_source: {\n          $ref: '#/$defs/api_spaces_data_source'\n        },\n        updated_at: {\n          type: 'string',\n          title: 'last modified',\n          format: 'date-time'\n        },\n        uuid: {\n          type: 'string',\n          title: 'unique id of knowledge base'\n        },\n        web_crawler_data_source: {\n          $ref: '#/$defs/api_web_crawler_data_source'\n        }\n      },\n      required: []\n    },\n    api_file_upload_data_source: {\n      type: 'object',\n      description: 'File to upload as data source for knowledge base.',\n      properties: {\n        original_file_name: {\n          type: 'string',\n          title: 'The original file name'\n        },\n        size_in_bytes: {\n          type: 'string',\n          title: 'The size of the file in bytes'\n        },\n        stored_object_key: {\n          type: 'string',\n          title: 'The object key the file was stored as'\n        }\n      },\n      required: []\n    },\n    api_indexed_data_source: {\n      type: 'object',\n      properties: {\n        completed_at: {\n          type: 'string',\n          title: 'timestamp when data source completed indexing',\n          format: 'date-time'\n        },\n        data_source_uuid: {\n          type: 'string',\n          title: 'uuid of the indexed data source'\n        },\n        error_details: {\n          type: 'string',\n          title: 'a detailed error description'\n        },\n        error_msg: {\n          type: 'string',\n          title: 'a string code provinding a hint which part of the system experienced an error'\n        },\n        failed_item_count: {\n          type: 'string',\n          title: 'total count of files that have failed'\n        },\n        indexed_file_count: {\n          type: 'string',\n          title: 'total count of files that have been indexed'\n        },\n        indexed_item_count: {\n          type: 'string',\n          title: 'total count of files that have been indexed'\n        },\n        removed_item_count: {\n          type: 'string',\n          title: 'total count of files that have been removed'\n        },\n        skipped_item_count: {\n          type: 'string',\n          title: 'total count of files that have been skipped'\n        },\n        started_at: {\n          type: 'string',\n          title: 'timestamp when data source started indexing',\n          format: 'date-time'\n        },\n        status: {\n          type: 'string',\n          enum: [            'DATA_SOURCE_STATUS_UNKNOWN',\n            'DATA_SOURCE_STATUS_IN_PROGRESS',\n            'DATA_SOURCE_STATUS_UPDATED',\n            'DATA_SOURCE_STATUS_PARTIALLY_UPDATED',\n            'DATA_SOURCE_STATUS_NOT_UPDATED',\n            'DATA_SOURCE_STATUS_FAILED'\n          ]\n        },\n        total_bytes: {\n          type: 'string',\n          title: 'total size of files in data source in bytes'\n        },\n        total_bytes_indexed: {\n          type: 'string',\n          title: 'total size of files in data source in bytes that have been indexed'\n        },\n        total_file_count: {\n          type: 'string',\n          title: 'total file count in the data source'\n        }\n      },\n      required: []\n    },\n    api_indexing_job: {\n      type: 'object',\n      title: 'IndexingJob description',\n      properties: {\n        completed_datasources: {\n          type: 'integer',\n          title: 'number of datasources indexed completed'\n        },\n        created_at: {\n          type: 'string',\n          title: 'creation date / time',\n          format: 'date-time'\n        },\n        data_source_uuids: {\n          type: 'array',\n          items: {\n            type: 'string'\n          }\n        },\n        finished_at: {\n          type: 'string',\n          format: 'date-time'\n        },\n        knowledge_base_uuid: {\n          type: 'string',\n          title: 'knowledge base id'\n        },\n        phase: {\n          type: 'string',\n          enum: [            'BATCH_JOB_PHASE_UNKNOWN',\n            'BATCH_JOB_PHASE_PENDING',\n            'BATCH_JOB_PHASE_RUNNING',\n            'BATCH_JOB_PHASE_SUCCEEDED',\n            'BATCH_JOB_PHASE_FAILED',\n            'BATCH_JOB_PHASE_ERROR',\n            'BATCH_JOB_PHASE_CANCELLED'\n          ]\n        },\n        started_at: {\n          type: 'string',\n          format: 'date-time'\n        },\n        status: {\n          type: 'string',\n          enum: [            'INDEX_JOB_STATUS_UNKNOWN',\n            'INDEX_JOB_STATUS_PARTIAL',\n            'INDEX_JOB_STATUS_IN_PROGRESS',\n            'INDEX_JOB_STATUS_COMPLETED',\n            'INDEX_JOB_STATUS_FAILED',\n            'INDEX_JOB_STATUS_NO_CHANGES',\n            'INDEX_JOB_STATUS_PENDING'\n          ]\n        },\n        tokens: {\n          type: 'integer',\n          title: 'number of tokens'\n        },\n        total_datasources: {\n          type: 'integer',\n          title: 'number of datasources being indexed'\n        },\n        updated_at: {\n          type: 'string',\n          title: 'last modified',\n          format: 'date-time'\n        },\n        uuid: {\n          type: 'string',\n          title: 'unique id'\n        }\n      },\n      required: []\n    },\n    api_spaces_data_source: {\n      type: 'object',\n      title: 'Spaces Bucket Data Source',\n      properties: {\n        bucket_name: {\n          type: 'string',\n          title: 'Spaces bucket name'\n        },\n        item_path: {\n          type: 'string'\n        },\n        region: {\n          type: 'string',\n          title: 'Region of bucket'\n        }\n      },\n      required: []\n    },\n    api_web_crawler_data_source: {\n      type: 'object',\n      title: 'WebCrawlerDataSource',\n      properties: {\n        base_url: {\n          type: 'string',\n          description: 'The base url to crawl.'\n        },\n        crawling_option: {\n          type: 'string',\n          description: 'Options for specifying how URLs found on pages should be handled.\\n\\n - UNKNOWN: Default unknown value\\n - SCOPED: Only include the base URL.\\n - PATH: Crawl the base URL and linked pages within the URL path.\\n - DOMAIN: Crawl the base URL and linked pages within the same domain.\\n - SUBDOMAINS: Crawl the base URL and linked pages for any subdomain.',\n          enum: [            'UNKNOWN',\n            'SCOPED',\n            'PATH',\n            'DOMAIN',\n            'SUBDOMAINS'\n          ]\n        },\n        embed_media: {\n          type: 'boolean',\n          description: 'Whether to ingest and index media (images, etc.) on web pages.'\n        }\n      },\n      required: []\n    },\n    api_links: {\n      type: 'object',\n      title: 'Links to other pages',\n      properties: {\n        pages: {\n          type: 'object',\n          title: 'Information about how to reach other pages',\n          properties: {\n            first: {\n              type: 'string',\n              title: 'first page'\n            },\n            last: {\n              type: 'string',\n              title: 'last page'\n            },\n            next: {\n              type: 'string',\n              title: 'next page'\n            },\n            previous: {\n              type: 'string',\n              title: 'previous page'\n            }\n          },\n          required: []\n        }\n      },\n      required: []\n    },\n    api_meta: {\n      type: 'object',\n      title: 'Meta information about the data set',\n      properties: {\n        page: {\n          type: 'integer',\n          title: 'the current page'\n        },\n        pages: {\n          type: 'integer',\n          title: 'total number of pages'\n        },\n        total: {\n          type: 'integer',\n          title: 'total amount of items over all pages'\n        }\n      },\n      required: []\n    }\n  }\n}\n```",
  inputSchema: {
    type: 'object',
    properties: {
      knowledge_base_uuid: {
        type: 'string',
      },
      page: {
        type: 'integer',
        description: 'page number.',
      },
      per_page: {
        type: 'integer',
        description: 'items per page.',
      },
      jq_filter: {
        type: 'string',
        title: 'jq Filter',
        description:
          'A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide ".results[].name".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/).',
      },
    },
  },
};

export const handler = async (client: GradientAI, args: Record<string, unknown> | undefined) => {
  const { knowledge_base_uuid, ...body } = args as any;
  return asTextContentResult(
    await maybeFilter(args, await client.knowledgeBases.dataSources.list(knowledge_base_uuid, body)),
  );
};

export default { metadata, tool, handler };
